#!/usr/bin/env ruby

require 'appiconset'
require 'json'
require 'optparse'
require 'fileutils'
require 'fastimage'


options = {}
option_parser = OptionParser.new
option_parser.version = Appiconset::VERSION
option_parser.on('-o', '--output <output>', '') { |v| options[:output] = v }
option_parser.banner="Usage: #{File.basename($0)} [options] <input>"
option_parser.on("-h", "--help", "Show this message") { puts option_parser; exit }

option_parser.parse!(ARGV)

if options.has_key?(:output)
  output = options[:output]
else
  output = Dir::home + "/appiconset-generated/"
end

if ARGV.length == 0 || !File.exist?(ARGV[0])
  STDERR.puts "no input file"
  exit
else
  input = ARGV[0]
end

Dir.glob("../lib/appiconset/*.json").each do |path|
  json_data = open(path) do |content|
    JSON.load(content)
  end

  # プラットフォームごとのディレクトリ
  platform =  File.basename(path).gsub("-Contents.json", "")
  output_dir = output + platform
  FileUtils.mkdir_p(output_dir) unless FileTest.exist?(output_dir)

  puts(output_dir)

  json_data["images"].each do |image|
    size = image["size"].match(/(.*?)x/)[1].to_i
    scale = image["scale"].gsub("x", "").to_i
    # 実際のサイズ
    real_size = size * scale
    name = image["filename"]

    command = sprintf("sips -Z %d %s --out %s/%s &> /dev/null ", real_size, input, output_dir, name)
    system(command)
  end

  begin
    if json_data["info"]["author"] == "xcode"
      # Xcode用にファイルをコピーする
      FileUtils.cp(path, output_dir + "/Contents.json")
    end
  rescue
    # none
  end
end